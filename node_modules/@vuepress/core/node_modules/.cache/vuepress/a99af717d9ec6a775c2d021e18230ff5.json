{"remainingRequest":"/home/runner/work/guide/guide/node_modules/babel-loader/lib/index.js??ref--3-1!/home/runner/work/guide/guide/node_modules/@vuepress/core/lib/client/util.js","dependencies":[{"path":"/home/runner/work/guide/guide/node_modules/@vuepress/core/lib/client/util.js","mtime":1655677211473},{"path":"/home/runner/work/guide/guide/node_modules/cache-loader/dist/cjs.js","mtime":1655677206637},{"path":"/home/runner/work/guide/guide/node_modules/babel-loader/lib/index.js","mtime":1655677207053}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}